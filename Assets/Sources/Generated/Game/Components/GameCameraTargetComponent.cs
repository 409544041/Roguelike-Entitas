//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity cameraTargetEntity { get { return GetGroup(GameMatcher.CameraTarget).GetSingleEntity(); } }
    public Assets.Sources.Features.Camera.Components.CameraTargetComponent cameraTarget { get { return cameraTargetEntity.cameraTarget; } }
    public bool hasCameraTarget { get { return cameraTargetEntity != null; } }

    public GameEntity SetCameraTarget(EntityReference newTarget) {
        if (hasCameraTarget) {
            throw new Entitas.EntitasException("Could not set CameraTarget!\n" + this + " already has an entity with Assets.Sources.Features.Camera.Components.CameraTargetComponent!",
                "You should check if the context already has a cameraTargetEntity before setting it or use context.ReplaceCameraTarget().");
        }
        var entity = CreateEntity();
        entity.AddCameraTarget(newTarget);
        return entity;
    }

    public void ReplaceCameraTarget(EntityReference newTarget) {
        var entity = cameraTargetEntity;
        if (entity == null) {
            entity = SetCameraTarget(newTarget);
        } else {
            entity.ReplaceCameraTarget(newTarget);
        }
    }

    public void RemoveCameraTarget() {
        cameraTargetEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Assets.Sources.Features.Camera.Components.CameraTargetComponent cameraTarget { get { return (Assets.Sources.Features.Camera.Components.CameraTargetComponent)GetComponent(GameComponentsLookup.CameraTarget); } }
    public bool hasCameraTarget { get { return HasComponent(GameComponentsLookup.CameraTarget); } }

    public void AddCameraTarget(EntityReference newTarget) {
        var index = GameComponentsLookup.CameraTarget;
        var component = CreateComponent<Assets.Sources.Features.Camera.Components.CameraTargetComponent>(index);
        component.Target = newTarget;
        AddComponent(index, component);
    }

    public void ReplaceCameraTarget(EntityReference newTarget) {
        var index = GameComponentsLookup.CameraTarget;
        var component = CreateComponent<Assets.Sources.Features.Camera.Components.CameraTargetComponent>(index);
        component.Target = newTarget;
        ReplaceComponent(index, component);
    }

    public void RemoveCameraTarget() {
        RemoveComponent(GameComponentsLookup.CameraTarget);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraTarget;

    public static Entitas.IMatcher<GameEntity> CameraTarget {
        get {
            if (_matcherCameraTarget == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraTarget);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraTarget = matcher;
            }

            return _matcherCameraTarget;
        }
    }
}
