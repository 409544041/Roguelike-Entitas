//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity currentPlayerEntity { get { return GetGroup(GameMatcher.CurrentPlayer).GetSingleEntity(); } }
    public CurrentPlayer currentPlayer { get { return currentPlayerEntity.currentPlayer; } }
    public bool hasCurrentPlayer { get { return currentPlayerEntity != null; } }

    public GameEntity SetCurrentPlayer(GameEntity newEntity, Assets.Sources.Helpers.Networking.Player newPlayer) {
        if (hasCurrentPlayer) {
            throw new Entitas.EntitasException("Could not set CurrentPlayer!\n" + this + " already has an entity with CurrentPlayer!",
                "You should check if the context already has a currentPlayerEntity before setting it or use context.ReplaceCurrentPlayer().");
        }
        var entity = CreateEntity();
        entity.AddCurrentPlayer(newEntity, newPlayer);
        return entity;
    }

    public void ReplaceCurrentPlayer(GameEntity newEntity, Assets.Sources.Helpers.Networking.Player newPlayer) {
        var entity = currentPlayerEntity;
        if (entity == null) {
            entity = SetCurrentPlayer(newEntity, newPlayer);
        } else {
            entity.ReplaceCurrentPlayer(newEntity, newPlayer);
        }
    }

    public void RemoveCurrentPlayer() {
        currentPlayerEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CurrentPlayer currentPlayer { get { return (CurrentPlayer)GetComponent(GameComponentsLookup.CurrentPlayer); } }
    public bool hasCurrentPlayer { get { return HasComponent(GameComponentsLookup.CurrentPlayer); } }

    public void AddCurrentPlayer(GameEntity newEntity, Assets.Sources.Helpers.Networking.Player newPlayer) {
        var index = GameComponentsLookup.CurrentPlayer;
        var component = CreateComponent<CurrentPlayer>(index);
        component.Entity = newEntity;
        component.Player = newPlayer;
        AddComponent(index, component);
    }

    public void ReplaceCurrentPlayer(GameEntity newEntity, Assets.Sources.Helpers.Networking.Player newPlayer) {
        var index = GameComponentsLookup.CurrentPlayer;
        var component = CreateComponent<CurrentPlayer>(index);
        component.Entity = newEntity;
        component.Player = newPlayer;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentPlayer() {
        RemoveComponent(GameComponentsLookup.CurrentPlayer);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentPlayer;

    public static Entitas.IMatcher<GameEntity> CurrentPlayer {
        get {
            if (_matcherCurrentPlayer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentPlayer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentPlayer = matcher;
            }

            return _matcherCurrentPlayer;
        }
    }
}
