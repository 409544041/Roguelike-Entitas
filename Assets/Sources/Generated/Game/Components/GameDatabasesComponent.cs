//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity databasesEntity { get { return GetGroup(GameMatcher.Databases).GetSingleEntity(); } }
    public Assets.Sources.Features.Components.DatabasesComponent databases { get { return databasesEntity.databases; } }
    public bool hasDatabases { get { return databasesEntity != null; } }

    public GameEntity SetDatabases(Assets.Sources.Helpers.DatabasesHandler newDatabases) {
        if (hasDatabases) {
            throw new Entitas.EntitasException("Could not set Databases!\n" + this + " already has an entity with Assets.Sources.Features.Components.DatabasesComponent!",
                "You should check if the context already has a databasesEntity before setting it or use context.ReplaceDatabases().");
        }
        var entity = CreateEntity();
        entity.AddDatabases(newDatabases);
        return entity;
    }

    public void ReplaceDatabases(Assets.Sources.Helpers.DatabasesHandler newDatabases) {
        var entity = databasesEntity;
        if (entity == null) {
            entity = SetDatabases(newDatabases);
        } else {
            entity.ReplaceDatabases(newDatabases);
        }
    }

    public void RemoveDatabases() {
        databasesEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Assets.Sources.Features.Components.DatabasesComponent databases { get { return (Assets.Sources.Features.Components.DatabasesComponent)GetComponent(GameComponentsLookup.Databases); } }
    public bool hasDatabases { get { return HasComponent(GameComponentsLookup.Databases); } }

    public void AddDatabases(Assets.Sources.Helpers.DatabasesHandler newDatabases) {
        var index = GameComponentsLookup.Databases;
        var component = CreateComponent<Assets.Sources.Features.Components.DatabasesComponent>(index);
        component.Databases = newDatabases;
        AddComponent(index, component);
    }

    public void ReplaceDatabases(Assets.Sources.Helpers.DatabasesHandler newDatabases) {
        var index = GameComponentsLookup.Databases;
        var component = CreateComponent<Assets.Sources.Features.Components.DatabasesComponent>(index);
        component.Databases = newDatabases;
        ReplaceComponent(index, component);
    }

    public void RemoveDatabases() {
        RemoveComponent(GameComponentsLookup.Databases);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDatabases;

    public static Entitas.IMatcher<GameEntity> Databases {
        get {
            if (_matcherDatabases == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Databases);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDatabases = matcher;
            }

            return _matcherDatabases;
        }
    }
}
