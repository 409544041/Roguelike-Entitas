//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Assets.Sources.Features.Items;

public partial class GameEntity {

    public InventoryComponent inventory { get { return (InventoryComponent)GetComponent(GameComponentsLookup.Inventory); } }
    public bool hasInventory { get { return HasComponent(GameComponentsLookup.Inventory); } }

    public void AddInventory(System.Collections.Generic.Dictionary<InventorySlot, InventoryItem> newItems) {
        var index = GameComponentsLookup.Inventory;
        var component = CreateComponent<InventoryComponent>(index);
        component.Items = newItems;
        AddComponent(index, component);
    }

    public void ReplaceInventory(System.Collections.Generic.Dictionary<InventorySlot, InventoryItem> newItems) {
        var index = GameComponentsLookup.Inventory;
        var component = CreateComponent<InventoryComponent>(index);
        component.Items = newItems;
        ReplaceComponent(index, component);
    }

    public void RemoveInventory() {
        RemoveComponent(GameComponentsLookup.Inventory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInventory;

    public static Entitas.IMatcher<GameEntity> Inventory {
        get {
            if (_matcherInventory == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Inventory);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInventory = matcher;
            }

            return _matcherInventory;
        }
    }
}
