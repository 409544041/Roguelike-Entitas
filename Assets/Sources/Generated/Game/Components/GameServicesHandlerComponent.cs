//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity servicesHandlerEntity { get { return GetGroup(GameMatcher.ServicesHandler).GetSingleEntity(); } }
    public Assets.Sources.Features.Components.ServicesHandler servicesHandler { get { return servicesHandlerEntity.servicesHandler; } }
    public bool hasServicesHandler { get { return servicesHandlerEntity != null; } }

    public GameEntity SetServicesHandler(Assets.Sources.Helpers.ServicesHandler newServices) {
        if (hasServicesHandler) {
            throw new Entitas.EntitasException("Could not set ServicesHandler!\n" + this + " already has an entity with Assets.Sources.Features.Components.ServicesHandler!",
                "You should check if the context already has a servicesHandlerEntity before setting it or use context.ReplaceServicesHandler().");
        }
        var entity = CreateEntity();
        entity.AddServicesHandler(newServices);
        return entity;
    }

    public void ReplaceServicesHandler(Assets.Sources.Helpers.ServicesHandler newServices) {
        var entity = servicesHandlerEntity;
        if (entity == null) {
            entity = SetServicesHandler(newServices);
        } else {
            entity.ReplaceServicesHandler(newServices);
        }
    }

    public void RemoveServicesHandler() {
        servicesHandlerEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Assets.Sources.Features.Components.ServicesHandler servicesHandler { get { return (Assets.Sources.Features.Components.ServicesHandler)GetComponent(GameComponentsLookup.ServicesHandler); } }
    public bool hasServicesHandler { get { return HasComponent(GameComponentsLookup.ServicesHandler); } }

    public void AddServicesHandler(Assets.Sources.Helpers.ServicesHandler newServices) {
        var index = GameComponentsLookup.ServicesHandler;
        var component = CreateComponent<Assets.Sources.Features.Components.ServicesHandler>(index);
        component.Services = newServices;
        AddComponent(index, component);
    }

    public void ReplaceServicesHandler(Assets.Sources.Helpers.ServicesHandler newServices) {
        var index = GameComponentsLookup.ServicesHandler;
        var component = CreateComponent<Assets.Sources.Features.Components.ServicesHandler>(index);
        component.Services = newServices;
        ReplaceComponent(index, component);
    }

    public void RemoveServicesHandler() {
        RemoveComponent(GameComponentsLookup.ServicesHandler);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherServicesHandler;

    public static Entitas.IMatcher<GameEntity> ServicesHandler {
        get {
            if (_matcherServicesHandler == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ServicesHandler);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherServicesHandler = matcher;
            }

            return _matcherServicesHandler;
        }
    }
}
